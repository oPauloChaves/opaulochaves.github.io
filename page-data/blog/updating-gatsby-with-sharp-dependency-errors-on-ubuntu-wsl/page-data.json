{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/updating-gatsby-with-sharp-dependency-errors-on-ubuntu-wsl/","result":{"data":{"contentfulBlogPost":{"title":"Updating Gatsby, Plugins and Solving Sharp Dependency Building Failure on Ubuntu using WSL","publishDate":"March 8th, 2020","tags":["cms","contentful","gatsby","graphql","node","npm","ubuntu","sharp","yarn","wsl"],"body":{"childMarkdownRemark":{"html":"<p>Recently I started getting my feet wet on headless CMS. I chose the following stack to work with: <a href=\"https://www.contentful.com/\">Contentful</a> + <a href=\"https://www.gatsbyjs.com/\">Gatsby</a> + <a href=\"https://material-ui.com/\">Material-UI</a>. First I read the Contentful documentation to get a better understanding of how things work, why use a headless CMS and what are the differences between a full fledged CMS like Wordpress and Contentful. Upon reading I created my account, then created some content types and added some content. Next I moved to writing code, as always, the most exciting part. I cloned <a href=\"https://www.gatsbyjs.org/starters/contentful-userland/gatsby-contentful-starter/\">this starter</a> that I found on the Gatsby website and edited it adding code from <a href=\"https://github.com/dominicabela/gatsby-starter-material-ui\">this other boilerplate</a> to get Material-UI integrated on my setup. Then after I have installed all dependencies with <code class=\"language-text\">yarn install</code> and run <code class=\"language-text\">yarn dev</code> I got everything running smoothly on localhost.</p>\n<p>I also started using Gatsby Cloud to deploy the demo and after setting up my account and have the builds running nicely everytime I pushed anything to master branch I noticed Gatsby was suggesting me to upgrade some dependencies. The reason for that was: </p>\n<blockquote>\n<p>To take full advantage of Gatsby Builds, upgrade to  <strong>gatsby@^2.19.5</strong> and  <strong>gatsby-plugin-sharp@^2.4.0</strong>.</p>\n</blockquote>\n<p>Doing that would give me the benefit of having distributed builds for the demo website, thus resulting in improved build times, as stated in the <a href=\"https://www.gatsbyjs.com/docs/distributed-builds/\">documentation</a>: </p>\n<blockquote>\n<p>You can expect consistent 2.5x improvements, and the caching and distribution on subsequent builds can lead to 10x improvements in build times.</p>\n</blockquote>\n<p>Of course, as an early adopter, and excited about trying out new features, I went on and opened up my terminal to update the dependencies as listed in the documentation, <code class=\"language-text\">npm i gatsby@^2.19.5 gatsby-plugin-sharp@^2.4.0</code>. Since I am running Yarn and the <code class=\"language-text\">gatsby</code> depenceny is under <code class=\"language-text\">devDependencies</code> I run the following commands to conform with my setup. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> /path/to/demo\n$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D gatsby@^2.19.5\n$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> gatsby-plugin-sharp@^2.4.0</code></pre></div>\n<p>Unfortunately after updating those two dependencies and tried to run <code class=\"language-text\">yarn dev</code> I started getting errors like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ERROR #85901  GRAPHQL\nThere was an error in your GraphQL query:\nUnknown type &quot;ImageSharpSizes&quot;.\nFile: node_modules/gatsby-transformer-sharp/src/fragments.js:251:55</code></pre></div>\n<p>You can clearly see it is a GraphQL related error coming from the <code class=\"language-text\">gatsby-transformer-sharp</code> plugin which now says the type <code class=\"language-text\">ImageSharpSizes</code> is unknown. :grimacing: Since I was also new to GraphQL I had no idea how to solve this, so Stackoverflow enters to rescue me. I found some links which led me to sharp repo issues and later another one which took me to <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-sharp\">gatsby-plugin-sharp repo</a> and there at the bottom of the README file there was a <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-sharp#troubleshooting\">troubleshooting section</a> explaining the issue and how to solve. The errors I was getting was because there were multiple incompatible versions of the <code class=\"language-text\">sharp</code> package installed in <code class=\"language-text\">node_modules</code> and to fix that I'd need to update all Gatsby dependencies that depended on the <code class=\"language-text\">sharp</code> package. In my case, those packages were:</p>\n<ul>\n<li>gatsby-plugin-sharp (I had just updated as written above)</li>\n<li>gatsby-source-contentful</li>\n<li>gatsby-transform-sharp</li>\n</ul>\n<p>I updated them to their latest versions, run <code class=\"language-text\">yarn dev</code> and this time it worked fine. :raised_hands: :clap: After getting that handled I also updated the <code class=\"language-text\">sharp</code> dependency in my package.json to ensure packages that relied on <code class=\"language-text\">sharp</code> would use the same version. That was when I clearly understood, after reading the troubleshooting mentioned above, why the demo included the <code class=\"language-text\">sharp</code> package even though it was not using it directly.</p>\n<p>At this stage everything was working fine, even when running Ubuntu as subsystem with WSL 2 in my Windows 10 PC. One thing interesting to note is that under WSL, when running the default terminal to open Ubuntu, everything works as expected, but unfortunately font support in this terminal is not good. I use ZSH with <a href=\"https://github.com/ohmyzsh/ohmyzsh\">Oh My Zsh</a>. With Oh My Zsh you get a nice looking terminal plus other nice features like autosuggest, highlighting and so on which improve my development environment a lot. To get a better font support I installed <a href=\"https://github.com/powerline/fonts\">powerline fonts</a> and <a href=\"https://github.com/mintty/wsltty\">wsltty</a> (another terminal for WSL). That, indeed, resulted in what I was expecting, which was a good font rendering with icons.</p>\n<p>But now whenever I tried to run <code class=\"language-text\">yarn install</code> the <code class=\"language-text\">sharp</code> build would fail due to this error:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token number\">4</span>/4<span class=\"token punctuation\">]</span> Building fresh packages<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.\nerror /home/<span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span>/app-name/node_modules/gatsby-plugin-sharp/node_modules/sharp: Command failed.\nExit code: <span class=\"token number\">1</span>\nCommand: <span class=\"token punctuation\">(</span>node install/libvips <span class=\"token operator\">&amp;&amp;</span> node install/dll-copy <span class=\"token operator\">&amp;&amp;</span> prebuild-install<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>node-gyp rebuild <span class=\"token operator\">&amp;&amp;</span> node install/dll-copy<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.\nOutput:\nERR<span class=\"token operator\">!</span> sharp ENOENT: no such <span class=\"token function\">file</span> or directory, <span class=\"token function\">mkdir</span> <span class=\"token string\">'C:\\Users\\[user]\\AppData\\Roaming/npm-cache'</span>\ninfo sharp Attempting to build from <span class=\"token builtin class-name\">source</span> via node-gyp but this may fail due to the above error\ninfo sharp Please see https://sharp.pixelplumbing.com/page/install <span class=\"token keyword\">for</span> required dependencies\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>Here the messages mention <code class=\"language-text\">sharp</code> failing to build and the reason for this is that this package depends on a native one called <code class=\"language-text\">libvips</code>. <a href=\"https://github.com/libvips/libvips\">libvips</a> is an image processing library written in C. That is why you see this <code class=\"language-text\">node install/libvips ...</code> command. There's a <a href=\"https://github.com/lovell/sharp/blob/v0.24.0/install/libvips.js\">install/libvips.js</a> script which is responsible for installing that sharp dependency. The script does things like checking if the system supports it, if libvips is already installed, and in case it is supported but not installed, it attempts to install it by first looking up the npm cache dir to grab a cached tar file, and if there's none it downloads it. That error was happening when the script attempted to get the tar file from <code class=\"language-text\">npm-cache</code> dir. This happens <a href=\"https://github.com/lovell/sharp/blob/v0.24.0/lib/libvips.js#L32\">here</a> and first it checks if the env <code class=\"language-text\">npm_config_cache</code> is set and if not it tries to interpolate <code class=\"language-text\">APPDATA</code> with <code class=\"language-text\">npm-cache</code>. In my case <code class=\"language-text\">npm_config_cache</code> was not defined but <code class=\"language-text\">APPDATA</code> was and it was equal to <code class=\"language-text\">C:\\Users\\[user]\\AppData\\Roaming</code>. Since I was running Ubuntu <code class=\"language-text\">APPDATA</code> shouldn't exist but <code class=\"language-text\">wsltty</code> had it defined and this caused the sharp build to fail. By not having <code class=\"language-text\">APPDATA</code> the script would fallback to <code class=\"language-text\">path.join(os.homedir(), &#39;.npm&#39;))</code> and this would work since this is the expected behavior and it is where npm keeps its cache.</p>\n<p>After having a clear picture of the problem there were some approaches I could choose to solve it:</p>\n<ul>\n<li>\n<p>Prefix the <code class=\"language-text\">yarn</code> command with <code class=\"language-text\">npm_config_cache</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">npm_config_cache</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">npm</span> config get cache<span class=\"token variable\">`</span></span> <span class=\"token function\">yarn</span> <span class=\"token function\">install</span></code></pre></div>\n<p>The downside is that I would probably have to use this prefix whenever I tried to install or update sharp \tto avoid the script picking up <code class=\"language-text\">APPDATA</code>.</p>\n</li>\n<li>\n<p>Export that env in my <code class=\"language-text\">.zshrc</code> file</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">EXPORT <span class=\"token assign-left variable\">npm_config_cache</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">npm</span> config get cache<span class=\"token variable\">`</span></span></code></pre></div>\n<p>But now I'd have to check if <code class=\"language-text\">npm</code> was installed and it seems hacky having to hardcode <code class=\"language-text\">npm_config_cache</code>. This was not what I wanted.</p>\n</li>\n<li>\n<p>Unset <code class=\"language-text\">APPDATA</code> within <code class=\"language-text\">.zshrc</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">unset</span> APPDATA</code></pre></div>\n<p>I chose this one. Since I was running Ubuntu it did not make sense to have this set because that is a Windows environment variable. This approach allowed me to keep using wsltty to run Node and also not touch any <code class=\"language-text\">npm</code> or <code class=\"language-text\">yarn</code> config.</p>\n</li>\n</ul>\n<hr>\n<p>At the time of this writing <a href=\"https://github.com/contentful-userland/gatsby-contentful-starter/commit/38edde98d4fd422352ee18477fa81cbb74ba1a2d\">the dependencies in the contentful starter repository have already been updated</a> and that means you should not get <code class=\"language-text\">sharp</code> errors related to conflicting versions like I did when updating dependencies and also you will take advantage of distributed builds in Gatsby Cloud.</p>","timeToRead":6}},"description":{"description":"Recently I started getting my feet wet on headless CMS. I chose the following stack to work with: Contentful + Gatsby + Material-UI. First I read the Contentful documentation to get a better understanding of how things work, why use a headless CMS and what are the differences between a full fledged CMS like Wordpress and Contentful. Upon reading I created my account, then created some content types and added some content. Next I moved to writing code, as always, the most exciting part. I cloned this starter that I found on the Gatsby website and edited it adding code from this other boilerplate to get Material-UI integrated on my setup. Then after I have installed all dependencies with yarn install and run yarn dev I got everything running smoothly on localhost."}}},"pageContext":{"slug":"updating-gatsby-with-sharp-dependency-errors-on-ubuntu-wsl"}}}