{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/rendering-custom-components-from-contenful-on-gatsby-with-mdx-or-rich-text","result":{"data":{"post":{"bodyNode":{"childMarkdownRemark":{"html":"<p>Here I am, diving into Contentful while working on my church's website by creating some initial content through Contentful's UI when suddenly at the bottom-right a chat pops up and suggests me to try out the Rich Text editor. Since I was not familiar with that concept I did some research and found out that I could take advantage of rich text fields to allow further customization when creating content like giving content editors the ability to use custom components without needing to know about some technicalities like markdown, HTML and even JSX.</p>\n<p>Up to that time I already had in mind having custom components built with React but the approach I was about to take was having editors writing custom markup with the Contentful's Markdown editor. To achieve that I would provide them some extra tags which they could use to add custom components on a page. To add a <code class=\"language-text\">Slider</code>, for example, the tags to use would be <code class=\"language-text\">&lt;Slider&gt;</code> and <code class=\"language-text\">&lt;Hero&gt;</code> as follow:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> Welcome to my Awesome Website</span>\n\nLet me show you how to render custom components with MDX.\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Slider</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Hero</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://image.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Hero</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://image.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Slider</span><span class=\"token punctuation\">></span></span>\n\nThat is really cool.</code></pre></div>\n<p>To let editors know how to use those components, there would be a documentation they could access, then read about it and when adding a <code class=\"language-text\">Slider</code> they would copy a snippet like the above and change <code class=\"language-text\">Hero</code>'s <code class=\"language-text\">src</code> prop with the url of the image he wants to. The doc would also tell them what the attributes available are, which are required and so on. For each custom component there would be a section in the documentation. As you see allowing editors to enter JSX would give them the flexibility that I had in mind. Doing that would also allow them to layout a page however they wanted. Another component content editors could use would be a <a href=\"https://material-ui.com/components/cards/#media\"><code class=\"language-text\">Card</code></a>, for instance.</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Card</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://image.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Title</span><span class=\"token punctuation\">></span></span>Card Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span><span class=\"token punctuation\">></span></span>Card's content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Content</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Card</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4>Rendering markdown with the Remark plugin</h4>\n<p>To render the content we query Contentfuls's API with the\n<a href=\"https://www.gatsbyjs.org/packages/gatsby-source-contentful/\">gatsby-source-contentful</a> plugin. Since our content contains markdown formatted text we also need\n<a href=\"https://www.gatsbyjs.org/packages/gatsby-transformer-remark/\">gatsby-transformer-remark</a> plugin that parses markdown into HTML using <a href=\"https://remark.js.org/\">Remark</a>. Having those two setup in our project we can use Gatsby graphql query to fetch the content we need with markdown already parsed and ready to be added into the page's html using the beautiful React's prop <a href=\"https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml\"><code class=\"language-text\">dangerouslySetInnerHTML</code></a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/templates/page.js</span>\n \n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'gatsby'</span>\n<span class=\"token keyword\">import</span> Layout <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/layout'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">PageTemplate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> page <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> data\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Layout<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>page<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div\n        dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          __html<span class=\"token operator\">:</span> page<span class=\"token punctuation\">.</span>bodyMarkdown<span class=\"token punctuation\">.</span>childMarkdownRemark<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query pageQuery($id: String!) {\n    page: contentfulPage(id: { eq: $id }) {\n      title\n      bodyMarkdown {\n        childMarkdownRemark {\n          html\n        }\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>Right in the query we invoke the Remark plugin to parse the <code class=\"language-text\">body</code> and return its result as HTML. The query result is made available to the page through the prop <code class=\"language-text\">data</code>. This works fine when you only have markdown and HTML, which is not my case. I need JSX support also. This setup has no support to parse my custom tags. As a consequence the JSX snippet is passed into <code class=\"language-text\">dangerouslySetInnerHTML</code> as it is, resulting in unexisting custom tags <code class=\"language-text\">&lt;slider&gt;</code> and <code class=\"language-text\">&lt;hero&gt;</code> and invalid HTML. This happens because the browser has no idea what a <code class=\"language-text\">Slider</code> or a <code class=\"language-text\">Hero</code> mean.</p>\n<p><img src=\"https://www.datocms-assets.com/26286/1587683629-invalid-html-custom-tags-2020-04-23-20-11-53.png\" alt=\"Result in unexisting custom tags and invalid html\"></p>\n<h4>Rendering markdown with the MDX plugin</h4>\n<p>Thanks to the React community and the rich ecosystem of plugins available for Gatsby there is a well known approach to write JSX code within markdown documents, it is called <a href=\"https://mdxjs.com/\">MDX</a> and to render it the\n<a href=\"https://www.gatsbyjs.org/packages/gatsby-plugin-mdx/\">gatsby-plugin-mdx</a> plugin is the one. This is exactly what I had in mind I just did not know it was called MDX. Here's what we can do with it:</p>\n<blockquote>\n<p>MDX is an authorable format that lets you seamlessly write JSX in your Markdown documents. You can import components, such as interactive charts or alerts, and embed them within your content. This makes writing long-form content with components a blast 🚀.</p>\n</blockquote>\n<p>Since this meets our needs, let's enable MDX in our project:</p>\n<p>1 - Install the dependencies</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> gatsby-plugin-mdx @mdx-js/mdx @mdx-js/react</code></pre></div>\n<p>2 - Add it into your plugins list in <code class=\"language-text\">gatsby-config.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ... other plugins</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-plugin-mdx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>After having installed the mdx related packages and enabled the plugin in <code class=\"language-text\">gatsby-config.js</code> if the developer server is running, consider restarting it, so that gatsby rebuilds the schema with mdx support. </p>\n<p>3 - Change the code to render MDX with your custom components</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/templates/page.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'gatsby'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MDXRenderer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'gatsby-plugin-mdx'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MDXProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@mdx-js/react'</span>\n\n<span class=\"token keyword\">import</span> Layout <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/layout'</span>\n<span class=\"token keyword\">import</span> Slider <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/slider'</span>\n<span class=\"token keyword\">import</span> Hero <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/hero'</span>\n\n<span class=\"token keyword\">const</span> shortcodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> Slider<span class=\"token punctuation\">,</span> Hero <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">PageTemplate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> bodyMarkdown <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>page\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Layout<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>MDXProvider components<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>shortcodes<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>MDXRenderer<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>bodyMarkdown<span class=\"token punctuation\">.</span>childMdx<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MDXRenderer<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MDXProvider<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query pageQuery($id: String!) {\n    page: contentfulPage(id: { eq: $id }) {\n      bodyMarkdown {\n        childMdx {\n          body\n        }\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">childMdx</code> is how we invoke the MDX plugin to parse the content</li>\n<li><a href=\"https://mdxjs.com/blog/shortcodes\"><code class=\"language-text\">shortcodes</code></a> are the components you want to allow editors to use.</li>\n<li><code class=\"language-text\">MDXProvider</code> is used to enable those custom components anywhere down in the tree</li>\n<li><code class=\"language-text\">MDXRenderer</code> is a component that renders the MDX content</li>\n</ul>\n<p>This works! It is what I needed. Custom components are being rendered and our site now has a cool Slider component. We just need to make sure a content person will type valid JSX syntax. </p>\n<h4>The other side</h4>\n<p>On adopting MDX for entering content I was assuming editors would be familiar with Markdown, HTML and even some JSX so that they could take max advantage of the nice features the editor would have now. And if that was not the case they would be willing to learn that cool tech. However, when looking through content editor's eyes that may know nothing about those terms, things start not looking that shiny and creating content with MDX for someone not familiar with it might be overwhelming. You now see that an editor just wants to create content using something as friendly as possible and having to deal with JSX is way too much for him. What they are looking for is just what they are used to when using Wordpress where they have a WYSIWYG editor.</p>\n<p>Upon giving MDX editing to them how we would make sure content people would always enter valid JSX? What if someone types <code class=\"language-text\">Slide</code> instead of <code class=\"language-text\">Slider</code>? What if he misses a required atribute? For example, <code class=\"language-text\">autoPlay</code>? What if he adds the <code class=\"language-text\">autoPlay</code> attribute but instead of assigning its value as <code class=\"language-text\">autoPlay={true}</code> he types <code class=\"language-text\">autoPlay=&quot;true&quot;</code>? How to enforce a limit on the number of images a slider can have? What about setting constraints to an image like only image of dimensions <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> is allowed and its size must be bellow 2MB? This approach seems cumbersome for non-tech people. If I were building the site for myself and was the one to manage its content, I would surely use MDX for rich components because it is awesome, but this is not the case, what I want here is everyone to be able to get up and running as quickly as posible with content creation.</p>\n<h4>Welcome Rich Text</h4>\n<p>Here <a href=\"https://www.contentful.com/developers/docs/concepts/rich-text/\">Rich Text</a> comes into play. Quoting Contentful's doc:</p>\n<blockquote>\n<p>Rich Text is a field type that enables authors to create rich text content, on par with traditional editors. Additionally, it allows entries and assets to be linked dynamically and embedded within the flow of the text.</p>\n</blockquote>\n<p>This is the chosen technique for adding custom components to a page. With rich text we can create some content types like <code class=\"language-text\">Slider</code>, <code class=\"language-text\">Card</code> where content people would create that and then just link the created content inside the rich text field in the same flow of text. We could even tell them they can inject other pages within the content and render them as <code class=\"language-text\">Card</code> where readers would see an image, description and a link to click and open that page. With rich text fields possibilities are numerous.</p>\n<p>If you got to this point you're impressive. Thank you for taking the time to read this post. You can get the <a href=\"https://github.com/opaulochaves/gatsby-contentful-rich-text\">code on github</a>. In the following posts I'll talk about adding rich text support, rendering its default components, customizing them and also creating our own components.</p>","timeToRead":7}},"title":"Rendering Custom Components from Contenful on Gatsby with MDX or Rich Text","slug":"rendering-custom-components-from-contenful-on-gatsby-with-mdx-or-rich-text","seoMetaTags":{"tags":[{"tagName":"title","content":"Rendering Custom Components from Contenful on Gatsby with MDX or Rich Text"},{"tagName":"meta","attributes":{"property":"og:title","content":"Rendering Custom Components from Contenful on Gatsby with MDX or Rich Text"}},{"tagName":"meta","attributes":{"name":"twitter:title","content":"Rendering Custom Components from Contenful on Gatsby with MDX or Rich Text"}},{"tagName":"meta","attributes":{"name":"description","content":"With Contentful one can enter long text using markdown editor or rich text. To allow custom components using the markdown editor you can write MDX content and render it with the mdx plugin. Rich text offers a friendlier way to add custom components without requiring content editors to know markdown, html or even jsx."}},{"tagName":"meta","attributes":{"property":"og:description","content":"With Contentful one can enter long text using markdown editor or rich text. To allow custom components using the markdown editor you can write MDX content and render it with the mdx plugin. Rich text offers a friendlier way to add custom components without requiring content editors to know markdown, html or even jsx."}},{"tagName":"meta","attributes":{"name":"twitter:description","content":"With Contentful one can enter long text using markdown editor or rich text. To allow custom components using the markdown editor you can write MDX content and render it with the mdx plugin. Rich text offers a friendlier way to add custom components without requiring content editors to know markdown, html or even jsx."}},{"tagName":"meta","attributes":{"name":"twitter:card","content":"summary_large_image"}},{"tagName":"meta","attributes":{"property":"article:modified_time","content":"2020-04-25T14:28:34Z"}},{"tagName":"meta","attributes":{"property":"article:published_time","content":"2020-04-25T12:51:30Z"}},{"tagName":"meta","attributes":{"property":"og:locale","content":"en_EN"}},{"tagName":"meta","attributes":{"property":"og:type","content":"article"}},{"tagName":"meta","attributes":{"property":"og:image","content":"https://www.datocms-assets.com/26286/1587817563-paulo-chaves.jpeg?w=1000&fit=max&fm=jpg"}},{"tagName":"meta","attributes":{"name":"twitter:image","content":"https://www.datocms-assets.com/26286/1587817563-paulo-chaves.jpeg?w=1000&fit=max&fm=jpg"}}]},"publishDate":"April 25th, 2020","id":"DatoCmsArticle-4582556-en","locale":"en","author":{"twitter":"opaulochaves","name":"Paulo Chaves","github":"opaulochaves"},"seo":{"description":"With Contentful one can enter long text using markdown editor or rich text. To allow custom components using the markdown editor you can write MDX content and render it with the mdx plugin. Rich text offers a friendlier way to add custom components without requiring content editors to know markdown, html or even jsx."},"hero":null},"home":{"edges":[{"node":{"seoMetaTags":{"tags":[{"tagName":"title","content":"Paulo Chaves | Software Engineer"},{"tagName":"meta","attributes":{"property":"og:title","content":"Paulo Chaves"}},{"tagName":"meta","attributes":{"name":"twitter:title","content":"Paulo Chaves"}},{"tagName":"meta","attributes":{"name":"description","content":"I am a Software Engineer who is excited about working with web technologies. I focus on building and maintaining applications that run React and Node."}},{"tagName":"meta","attributes":{"property":"og:description","content":"I am a Software Engineer who is excited about working with web technologies. I focus on building and maintaining applications that run React and Node."}},{"tagName":"meta","attributes":{"name":"twitter:description","content":"I am a Software Engineer who is excited about working with web technologies. I focus on building and maintaining applications that run React and Node."}},{"tagName":"meta","attributes":{"name":"twitter:card","content":"summary_large_image"}},{"tagName":"meta","attributes":{"property":"article:modified_time","content":"2020-04-21T18:46:52Z"}},{"tagName":"meta","attributes":{"property":"article:published_time","content":"2020-04-21T17:31:31Z"}},{"tagName":"meta","attributes":{"property":"og:locale","content":"en_EN"}},{"tagName":"meta","attributes":{"property":"og:type","content":"article"}},{"tagName":"meta","attributes":{"property":"og:image","content":"https://www.datocms-assets.com/26286/1587817563-paulo-chaves.jpeg?w=1000&fit=max&fm=jpg"}},{"tagName":"meta","attributes":{"name":"twitter:image","content":"https://www.datocms-assets.com/26286/1587817563-paulo-chaves.jpeg?w=1000&fit=max&fm=jpg"}}]},"owner":{"id":"DatoCmsPerson-4582508-en","name":"Paulo Chaves","email":"opaulochaves@gmail.com","company":"Chavinx","facebook":"","github":"opaulochaves","twitter":"opaulochaves","linkedin":"opaulochaves","title":"Software Engineer","image":{"title":"Paulo Chaves","fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='400'%20viewBox='0%200%20400%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2031v31h12c13%201%2015%200%2015-3-1-3%201-14%202-14%202%203%203%209%202%2014-2%208-1%208-17%207H0v115h8c7%200%2018%202%2018%204%200%203-16%206-18%203l-4-1-4-1v94c0%2095%200%2095%202%2094%203%200%204-2%204-8v-6l3-1%204-2c0-2%2010-11%2011-11%202%200%202-1%202-3-1-2%200-5%204-10%203-4%203-4%206-1l2%202%204%203%203%203c2%200%201-4-1-5-5-1-7-9-4-12%204-3%206-7%205-11%200-4%203-8%207-8l5-3c5-6%2010-4%2010%204%200%202%200%202%201%201v-7c-1-6-1-6%201-8l4-4%205-4%203-5c1-1%202-3%204-3l4-5c1-2%205-5%207-5l4-3c4-3%2012-6%2017-5h5c2-1%200-2-4-3-5%200-4-1%200-2s10%201%2010%202l2%201v1c-1%200-2%201-2%203%200%203%204%205%207%203h3l4%2012v2h-6c-6-1-8%200-4%202%203%201%208%205%209%207%201%204%204-2%205-11%201-7%203-12%204-12l3-3c2-4%204-4%206-1%202%202%202%205%203%2016l1%2014%204-2c5-4%206-4%208%201%201%203%206%208%2010%2013l11%2013c2%204%202%204%205%203%202-2%204-4%208-13l3-4%204-5%203-4%203-4c1-3%202-4%204-4%204%200%205-1%208-16%203-11%205-29%204-35l-1-3-1%202-2%2010-5%2015-2%207c-2%206-6%2013-8%2014l-3%203c-2%202-2%202-3%201-3-5-9-2-11%204-4%2016-7%2019-11%2011l-3-6-3-4-4-7c-3-5-3-6%201-6%203%200%203%200%204-4l2-6%202-2-3-1-3-2c-1%200%203-6%205-7%209-1%2012-3%2019-7a62%2062%200%200015-13c3-4%204-6%206-13l4-9%202-6c1-7%204-8%209-3l9%206c5%203%206%203%2011%202l9-1%205-1c1-1%203-1%208%201l11%203c5%200%2012%202%2021%205l8%202%206%202%208%203c7%202%2015%206%2028%2017a160%20160%200%200124%2022l7%206c2%202%202%2031%200%2031v3c2%204%201%2046-1%2048v2c2%201%202%202%202%208v8l-6%202c-9%205-11%206-12%208l-4%201-7%205c-5%204-5%204-9%201-6-4-6-7%200-14l5-7%202-3c2-1%202-2%202-4-1-4%203-9%208-12%202%200%203-2%203-2l2-3%201-2-2%201-4%201c-2%200-3%201-5%203l-3%202-1%202-2%204-3%204-2%204-4%204c-2%205-6%204-6-1l-2-5c-1-4-1-4%202-9%204-6%204-8%201-8-4%200-5%202-6%2014-1%2013-1%2014-5%2014l-3%202c0%202%200%202%203%202%205-1%207%200%208%203%200%205-4%2012-8%2013l-4%202c0%202%200%202%207%202%209-1%209-1%204%209l6%201c5%200%206%200%207-2%201-3%206-3%208%200%202%202%2013%203%2013%201%200-1-7-5-10-5-5%200-4-3%202-6l5-4%205-4%208-6c5-3%206-4%206-1%201%201%201-83%201-186V0H0v31m98%2028c-5%201-5%203-1%203l6%201%203%201-2%201h-6c-4-2-9%202-6%206%202%204%208%204%2015%200%205-2%206-3%204-6-1%200-2-2-1-3%201-5-4-6-12-3m99%206l-10%202a575%20575%200%2001-28%207c-9%200-10%201-12%206l-2%207c-1%203-1%205%201%207l1%204-1%203-2%202-1%201-2%204c-2%206%201%2011%208%2013l8%205c1%202%204%203%206%204%205%201%206%202%206%2014l-1%2019-1%209%204%204c4%203%204%205%200%2010l-1%204-1%203-2%204c0%203%200%203%204%203l10%202c6%202%205%204-2%206-8%202-12%204-12%205%200%202%204%204%206%203s10%201%2011%202c2%202%201%203-7%207l-9%205%202%203%202%204c0%204%2021%204%2029%200l7-6%204-2%202-2%204-6%203-5c0-3%203-7%204-7%201%201%204-7%204-10l2-4c3-4%205-12%205-19%200-5%201-6%207-6%203%200%204%200%205-2l1-3%201-7%204-10c3-6%203-16%201-18-2-3-7-2-9%201-1%202-4%203-5%201l-1-15c0-15-2-23-7-31-12-21-17-23-36-21M91%20101l-4%201c-3-1-7%201-7%204%200%202%201%202%204%202l8%202c3%201%204%201%205-1%202-1%203-1%203%201%201%203%203%202%205-1%202-5-2-10-5-6-1%201-1%201-3-1-1-2-2-2-6-1m101%2020l-6%203c-2%203%200%2013%203%2013l5%203c4%202%209%203%2013%201l7-4%204-3c0-2-4-5-6-5-4%200-3-4%201-6%202%200%203-1%202-2h-23M27%20139c-3%200-3%201-3%203%200%203%200%203%208%203l11%202c6%203%2013%200%2011-5-1-3-6-5-11-3l-7%201a1666%201666%200%2000-9-1m121%208l-3%202-2%203c-1%202-3%203-8%201-6-2-5%206%201%2014%203%204%206%205%205%203l1-2%202%201%202%201%203%202%203%201c1%200%203-5%201-7l2-6c2-3%202-4%201-5l-1-4c2-6-2-9-7-4m-72%208c-1%202-2%209%200%2014%201%207%201%2014-1%2016-2%203-1%204%203%204%205%201%207%200%207-6l1-11c1-5-1-14-3-17h-7m-32%2020c-1%205-2%207-4%207l-2%201-4%201c-4%200-5%201-2%203l7%201%209-1c5%200%2012-6%2012-11%200-2-12-8-14-8l-2%207m48%204v3c-1%201%200%203%201%205l3%202%202-2%202-3%205%201c6%203%2018%202%2019-1%200-3-2-4-9-5a904%20904%200%2001-23%200m9%2015c-2%203-1%206%202%209%204%205%204%208%201%208-3%201-3%204%201%204%202%200%203%200%203-2s1-3%203-4c4-2%204-7%201-9l-3-4c-2-4-7-6-8-2m222%2077l-14%207c-3%200-13%205-13%206%200%202%207%201%2012-2l9-2c5-1%2013-7%2010-10-2-1-3-1-4%201m34%2010l-2%204-3%209-3%208%202%204%202%202h-2c-3%201-2%203%202%203%205%200%209-6%205-6-3-1-3-3-1-8l3-16c0-2-1-2-3%200m-35%2012c-1%202-4%203-5%203l-6%202-6%203c-5%201-6%201-3%202%203%202%2010%201%2013-1l5-2%203-1%204-3%203-3c-1-2-4-2-8%200m-168%2016l-6%202c-4%200-10%202-10%203%200%202%2013%201%2016-1l5-1c12%201%2018-2%207-3l-7-1c-2-1-4%200-5%201m164%209l-5%202-4%201c-2%202-2%202%205%202%207%201%207%201%2012-2l5-4c0-2-10-1-13%201m5%2023c-3%202-16%203-33%202-8-1-11%201-7%203h25c19-1%2028-3%2024-6-2-2-7-1-9%201m67%2014l-2%203-6%204c-2%201-5%202-5%204-2%203-7%207-11%208l-4%202c0%201%203%204%205%204s7-3%207-5l2-1%204-4%207-7%205-6c1-1%200-3-2-2m-204%209c-2%202-13%203-15%202-3-2-14-2-16%200l-3%201c-6%201%2012%203%2022%202h13c5%201%207%200%205-3-1-3-3-4-6-2m102%201l-3%202c-2%201%209%203%2014%203l13-1c8%200%2011-1%2010-2h-11a35%2035%200%2001-19-3l-4%201m-98%209v3l-3%205-3%204-10-1c-11-1-13-1-23%201h-11c-3-1-7%200-7%201l38%201c13%200%2017%201%2018%202%203%202%207-2%205-5l-3-7-1-4m-102%206l3%203c3%203%202%205-2%206l-6%204c-2%203-9%205-16%205l-5%201c-1%201%208%201%2024%201h26v-3l-1-4-3-6c-3-6-4-6-10-6h-6c-1-2-4-3-4-1m173%203c-2%200-3%202%200%202l12%206%208%201c7-1%208-1%2010%202s6%203%2011%200%203-4-7-5l-10-1-3-1-7-2c-4-3-9-4-14-2m-4%2012l2%203c2%202%203%202%2017%202l15-1c0-2-2-2-9-2l-13-2h-12'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"https://www.datocms-assets.com/26286/1587424741-paulochaves.jpeg?auto=format","srcSet":"https://www.datocms-assets.com/26286/1587424741-paulochaves.jpeg?auto=format&dpr=0.09&w=450 38w,\nhttps://www.datocms-assets.com/26286/1587424741-paulochaves.jpeg?auto=format&dpr=0.17&w=450 75w,\nhttps://www.datocms-assets.com/26286/1587424741-paulochaves.jpeg?auto=format&dpr=0.34&w=450 150w,\nhttps://www.datocms-assets.com/26286/1587424741-paulochaves.jpeg?auto=format&dpr=0.5&w=450 225w,\nhttps://www.datocms-assets.com/26286/1587424741-paulochaves.jpeg?auto=format&dpr=0.67&w=450 300w,\nhttps://www.datocms-assets.com/26286/1587424741-paulochaves.jpeg?auto=format&dpr=1&w=450 450w","sizes":"(max-width: 150px) 100vw, 150px"}}}}}]}},"pageContext":{"locale":"en","id":"DatoCmsArticle-4582556-en","slug":"rendering-custom-components-from-contenful-on-gatsby-with-mdx-or-rich-text","postLocales":{"en":true}}}}